{"version":3,"sources":["components/DisplayWeather.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["DisplayWeather","props","data","useState","time","setTime","APIKEY","process","e","a","preventDefault","location","localStorage","getItem","fetch","then","res","json","resData","setInterval","Date","toLocaleTimeString","className","cod","Fragment","Card","style","width","Body","Title","name","sys","country","Text","Math","floor","main","temp","borderTop","marginTop","weather","Container","Row","temp_max","temp_min","humidity","pressure","visibility","Button","variant","onClick","weatherData","message","Weather","setWeather","city","form","setForm","alert","setItem","Form","Group","controlId","Label","Control","type","placeholder","onChange","value","target","handleChange","undefined","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5feae126.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./displayweather.css\";\nimport { Card, Button, Container, Row } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction DisplayWeather(props) {\n  \n  // [ Useful Variables ]\n  let { data } = props;\n  let [ time, setTime ] = useState('');\n  const APIKEY = process.env.REACT_APP_KEY;\n\n  // [ Time Function ]\n  function tick() {\n    setTime(new Date().toLocaleTimeString())\n  }\n  setInterval(tick, 1000);\n  \n  \n  // [ Weather Function ]\n  async function weatherData(e) {\n    e.preventDefault();\n    let location = localStorage.getItem('location');\n    const resData = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${APIKEY}`\n    )\n      .then((res) => res.json())\n      .then((resData) => resData);\n      data = resData;\n  }\n  return (\n    <div className=\"displayweather\">\n      {data.cod !== 404 ? (\n        <React.Fragment>\n          <Card style={{ width: '27rem' }}>\n            <Card.Body>\n              <Card.Title>{data.name} , {data.sys.country}. Weather</Card.Title>\n              <Card.Text>\n                As of {time}\n              </Card.Text>\n              <h1>\n                {\" \"}\n                {Math.floor(data.main.temp - 273.15)}\n                <sup>o</sup>\n              </h1>\n              <Card.Text style={{borderTop: \"1px solid black\", marginTop: \"5px\"}}>\n                {data.weather[0].main}\n                <Container>\n                  <Row>\n                    High/Low: {Math.floor(data.main.temp_max - 273.15)}/\n                      {Math.floor(data.main.temp_min - 273.15)}\n                  </Row>\n                  <Row>\n                    Humidity: {data.main.humidity} %\n                  </Row>\n                  <Row>\n                    Pressure: {data.main.pressure} hPa\n                  </Row>\n                  <Row>\n                    Visibility: {data.visibility / 1000} Km\n                  </Row>\n                </Container>\n              </Card.Text>\n              <Button variant=\"primary\" onClick={(e) => weatherData(e)}>Refresh</Button>\n            </Card.Body>\n          </Card>\n        </React.Fragment>\n      ) : (\n        <div className=\"maincard\">\n          <h2>{data.message}</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default DisplayWeather;\n","import React, { useState } from \"react\";\nimport DisplayWeather from \"./DisplayWeather\";\nimport { Form, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Weather() {\n  \n  // [ Useful Variables ]\n  const APIKEY = process.env.REACT_APP_KEY;\n  const [ weather, setWeather ] = useState([]);\n  let [ time, setTime ] = useState('');\n  const [ form, setForm ] = useState({\n    city: \"\"\n  });\n\n  // [ Time Function ]\n  function tick() {\n    setTime(new Date().toLocaleTimeString())\n  }\n  setInterval(tick, 1000);\n  \n  // [ Weather Function ]\n  async function weatherData(e) {\n    e.preventDefault();\n    if (form.city === \"\") {\n      alert(\"Add Location\");\n    } else {\n      localStorage.setItem('location',form.city);\n      const data = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${form.city}&appid=${APIKEY}`\n      )\n        .then((res) => res.json())\n        .then((data) => data);\n\n      setWeather({ data: data });\n    }\n  }\n\n  // [ OnChange Varibles Set ]\n  const handleChange = (e) => {\n    let value = e.target.value;\n    setForm({ ...form, city: value });\n  };\n  \n  return (\n    <span className=\"weather\">\n      <Form>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Search Location</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"Search Location\" name=\"city\"  onChange={(e) => handleChange(e)}/>\n          <Form.Text className=\"text-muted\">\n            Search Any Location & You'll Get Weather Information\n          </Form.Text>\n          <div>\n          <Form.Text className=\"text-muted\">\n            Current Time: {time}\n          </Form.Text>\n          </div>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\" onClick={(e) => weatherData(e)}>\n          Submit\n        </Button>\n      </Form>\n      {weather.data !== undefined ? (\n        <div>\n          <DisplayWeather data={weather.data} />\n        </div>\n      ) : null}\n    </span>\n  );\n}\n\nexport default Weather;\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}